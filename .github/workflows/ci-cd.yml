name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          frontend/package-lock.json
          backend/package-lock.json
    
    - name: Install root dependencies
      run: npm ci
      
    - name: Install frontend dependencies
      run: cd frontend && npm ci
      
    - name: Install backend dependencies
      run: cd backend && npm ci
      
    - name: Run frontend tests
      run: cd frontend && npm run test
      
    - name: Run backend tests
      run: cd backend && npm run test
      
    - name: Run frontend linting
      run: cd frontend && npm run lint
      
    - name: Run TypeScript check (frontend)
      run: cd frontend && npx tsc --noEmit
      
    - name: Run TypeScript check (backend)
      run: cd backend && npx tsc --noEmit
      
    - name: Build frontend
      run: cd frontend && npm run build
      
    - name: Build backend
      run: cd backend && npm run build

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit (frontend)
      run: cd frontend && npm audit --audit-level high
      
    - name: Run security audit (backend)
      run: cd backend && npm audit --audit-level high

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Generate deployment artifact
      run: |
        echo "IMAGE_TAG=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" > deployment.env
        echo "DEPLOYMENT_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployment.env
        
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-config
        path: deployment.env

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Download deployment artifact
      uses: actions/download-artifact@v4
      with:
        name: deployment-config
        
    - name: Load deployment variables
      run: cat deployment.env >> $GITHUB_ENV
      
    - name: Deploy to staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          # Stop existing container
          docker stop finance-tracker-staging || true
          docker rm finance-tracker-staging || true
          
          # Pull latest image
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker pull ${{ env.IMAGE_TAG }}
          
          # Run new container
          docker run -d \
            --name finance-tracker-staging \
            --restart unless-stopped \
            -p 3001:3000 \
            -v finance-tracker-staging-data:/app/data \
            -e NODE_ENV=staging \
            -e JWT_SECRET=${{ secrets.JWT_SECRET_STAGING }} \
            ${{ env.IMAGE_TAG }}
          
          # Health check
          sleep 10
          curl -f http://localhost:3001/api/health || exit 1
          
    - name: Staging deployment status
      run: |
        echo "üöÄ Staging deployment completed successfully!"
        echo "üìä Image: ${{ env.IMAGE_TAG }}"
        echo "‚è∞ Deployed at: ${{ env.DEPLOYMENT_TIME }}"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download deployment artifact
      uses: actions/download-artifact@v4
      with:
        name: deployment-config
        
    - name: Load deployment variables
      run: cat deployment.env >> $GITHUB_ENV
      
    - name: Deploy to production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          # Create backup of current container
          docker commit finance-tracker-prod finance-tracker-backup:$(date +%Y%m%d-%H%M%S) || true
          
          # Stop existing container
          docker stop finance-tracker-prod || true
          docker rm finance-tracker-prod || true
          
          # Pull latest image
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker pull ${{ env.IMAGE_TAG }}
          
          # Run new container
          docker run -d \
            --name finance-tracker-prod \
            --restart unless-stopped \
            -p 3000:3000 \
            -v finance-tracker-prod-data:/app/data \
            -v finance-tracker-prod-logs:/app/logs \
            -e NODE_ENV=production \
            -e JWT_SECRET=${{ secrets.JWT_SECRET_PRODUCTION }} \
            ${{ env.IMAGE_TAG }}
          
          # Health check
          sleep 10
          curl -f http://localhost:3000/api/health || exit 1
          
          # Cleanup old images (keep last 3)
          docker images finance-tracker-backup --format "table {{.Tag}}" | tail -n +4 | xargs -r docker rmi || true
          
    - name: Production deployment status
      run: |
        echo "üéâ Production deployment completed successfully!"
        echo "üìä Image: ${{ env.IMAGE_TAG }}"
        echo "‚è∞ Deployed at: ${{ env.DEPLOYMENT_TIME }}"
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: |
          Finance Tracker deployment to production ${{ job.status }}!
          Image: ${{ env.IMAGE_TAG }}
          Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Delete deployment artifacts
      uses: geekyeggo/delete-artifact@v2
      with:
        name: deployment-config